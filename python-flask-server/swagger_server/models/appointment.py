# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Appointment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, appointment_id: str=None, _date: str=None, time: str=None, duration: float=None, name: str=None, comments: str=None, notification: object=None):  # noqa: E501
        """Appointment - a model defined in Swagger

        :param appointment_id: The appointment_id of this Appointment.  # noqa: E501
        :type appointment_id: str
        :param _date: The _date of this Appointment.  # noqa: E501
        :type _date: str
        :param time: The time of this Appointment.  # noqa: E501
        :type time: str
        :param duration: The duration of this Appointment.  # noqa: E501
        :type duration: float
        :param name: The name of this Appointment.  # noqa: E501
        :type name: str
        :param comments: The comments of this Appointment.  # noqa: E501
        :type comments: str
        :param notification: The notification of this Appointment.  # noqa: E501
        :type notification: object
        """
        self.swagger_types = {
            'appointment_id': str,
            '_date': str,
            'time': str,
            'duration': float,
            'name': str,
            'comments': str,
            'notification': object
        }

        self.attribute_map = {
            'appointment_id': 'appointmentID',
            '_date': 'date',
            'time': 'time',
            'duration': 'duration',
            'name': 'name',
            'comments': 'comments',
            'notification': 'notification'
        }

        self._appointment_id = appointment_id
        self.__date = _date
        self._time = time
        self._duration = duration
        self._name = name
        self._comments = comments
        self._notification = notification

    @classmethod
    def from_dict(cls, dikt) -> 'Appointment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Appointment of this Appointment.  # noqa: E501
        :rtype: Appointment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment_id(self) -> str:
        """Gets the appointment_id of this Appointment.


        :return: The appointment_id of this Appointment.
        :rtype: str
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id: str):
        """Sets the appointment_id of this Appointment.


        :param appointment_id: The appointment_id of this Appointment.
        :type appointment_id: str
        """

        self._appointment_id = appointment_id

    @property
    def _date(self) -> str:
        """Gets the _date of this Appointment.


        :return: The _date of this Appointment.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Appointment.


        :param _date: The _date of this Appointment.
        :type _date: str
        """

        self.__date = _date

    @property
    def time(self) -> str:
        """Gets the time of this Appointment.


        :return: The time of this Appointment.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this Appointment.


        :param time: The time of this Appointment.
        :type time: str
        """

        self._time = time

    @property
    def duration(self) -> float:
        """Gets the duration of this Appointment.


        :return: The duration of this Appointment.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration: float):
        """Sets the duration of this Appointment.


        :param duration: The duration of this Appointment.
        :type duration: float
        """

        self._duration = duration

    @property
    def name(self) -> str:
        """Gets the name of this Appointment.


        :return: The name of this Appointment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Appointment.


        :param name: The name of this Appointment.
        :type name: str
        """

        self._name = name

    @property
    def comments(self) -> str:
        """Gets the comments of this Appointment.


        :return: The comments of this Appointment.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """Sets the comments of this Appointment.


        :param comments: The comments of this Appointment.
        :type comments: str
        """

        self._comments = comments

    @property
    def notification(self) -> object:
        """Gets the notification of this Appointment.


        :return: The notification of this Appointment.
        :rtype: object
        """
        return self._notification

    @notification.setter
    def notification(self, notification: object):
        """Sets the notification of this Appointment.


        :param notification: The notification of this Appointment.
        :type notification: object
        """

        self._notification = notification
